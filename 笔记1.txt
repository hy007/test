形参和返回值
形式参数：
	基本类型（略）
	引用类型
		类：（匿名对象）需要该类的对象
		抽象类：需要的是该抽象类的子类对象
		接口：需要改接口的实现类对象
返回值类型：
	基本类型（略）
	引用类型
		类：返回的是该类的对象
		抽象类：返回的是该抽象类的子类对象
		接口：返回的是该接口的实现类的对象
链式编程：每次调用完毕后返回的是个对象
包的概述：其实就是文件夹
	作用：
		A:对类进行分类管理
		B:吧相同的类名放到不同的包中
	举例：
		老师：添加、修改、查看、删除
		学生：添加、修改、查看、删除
		方案1：按功能分
		方案2：按照模块分
	包的定义：package 包名；多级包名用（.）点分开
		注意事项：
			A:package语句必须是程序可执行的代码之前
			B:在一个Java只能使用一个包
			C:如果没有package默认为无包名
		带包的编译与运行
			A:手动创建一个包：
				a：编写一个带包的Java文件
				b:通过javac命令编译该Java文件
				C:手动创建一个包名：
				d:吧b步骤的class文件放到c步骤的最底层包
				e:回到和包根目录在同一目录的地方运行
					带包运行
			B:自动式
				a:编写一个带包的Java文件
				b:javac编译的时候带上-d即可
				javac -d . HelloWord.java 
				c:自动创建包
		不同包类之间的访问：
			导包 import 包名.类名  或 import 包名.*建议用谁导谁
		面试题：package import class有没有顺序关系？？
			有： package>import >class
			package :只能有一个
			import:可以有多个
			class:可以有多个，建议有一个
权限修饰符
				public			private			protect 	默认
		
	本类中		y				Y				Y			Y
	同包子类	Y				N				Y			Y
	不同包子类	Y				N				Y			N
	不同包无关类Y				N				N			N
类常见的修饰符：
	权限修饰符 public ，默认
	状态修饰符：final
	抽象修饰符：abstract
成员变量：
	权限修饰符：private 默认 protected public 
	状态修饰符：final static
成员方法：
	权限修饰符：private 默认 protected public 
	状态修饰符：final static
	抽象修饰符：abstract
构造方法：
	权限修饰符：private 默认 protected public 
除此之外的组合规则：
成员变量：public static final
成员方法：public static
		  public abstract
		  public final
内部类：
	把类定义在其他类的内部，这个类就是内部类
	内部类的访问特点：
		A:内部类可以直接访问外部累的成员，包括私有的
		B:外部类要访问内部类必须创建对象
	内部类的位置：
		成员位置：成员内部类
			直接访问内部类成员
			格式： 外部类名.内部类名 对象名=外部类对象.内部类对象
			成员内部类的常见修饰符：private（保证了数据的安全性）
			private 不能访问了，在外部类定义并访问内部类
			static 静态内部类访问的外部类的数据静态成员 为了方便访问数据
			成员内部类被静态修饰后的访问形式：
			格式： 外部类名.内部类名 对象名=new外部类名.内部类名（）；
			内部类和外部类没有继承关系
			通过外部类名限定this对象
			外部类名.this
		局部位置：局部内部类
		A:可以直接访问外部类成员
		B:在局部可以创建内部类对象，通过对象调用内部类方法，来使用局部内部类功能
		面试题：
			局部内部类访问局部变量的注意事项
			A:局部内部类访问局部变量的必须用final修饰
			B:为什么呢？
				局部变量是随着方法的调用而调用，随着调用玩吧而消失。
				而堆内存的内容并不会立即消失。所以加以final修饰
				加入final修饰后，这个变量成了常量。既然是常量。你消失了
				我在内存中存储的是数据本身，所以，我还是有数据使用的。
	匿名内部类	
		就是内部类的简化写法：
	前提：存在一个类或接口
		这里的类可以是具体类也可以是抽象类
	格式：
		new 类名后者接口名（）{
		重写方法
		}
	本质：是一个类是个对象，即该或该类的子类或接口的子类
			是一个继承了该类或者实现类该接口的子类匿名对象
	匿名内部类在开发中的使用：
		面试题：
			interface inter {
				void show();
			}
		class Outer {
		public ststic Inter method(){
			return new Inter(){
				public void show(){
					System.out.println("HelloWord");
				}
			};
		}
		}
		class OuterDemo{
			public static void  main(String [] args){
				Outer.mehtod().show();
				Outer.mehtod()为静态方法，
				Outer.mehtod().show()并且有返回值是一个对象
				又由于接口inter中有一个show方法，所以返回值是个接口
			}
		}
		控制台输出："HelloWord"
		
		
		
		
		
		
		
		
		
		
		