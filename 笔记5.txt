集合类：
	集合的概述：为另外存储对象变量
数组和集合的区别：
	A:长度不同：
		数组的长度固定，集合的长度可变
	B:内容不同
		数组存储的是同一中类型的元素
		而集合可以存储不同类型的元素
	C:元素的数据类型的问题
		数组可以存储基本类型，也可以存储引用类型
		集合只能存储引用类型
多个元素中不能有相同的
多个元素按照规则排序的
多个集合类的数据结构不同
数据结构：数据的组织方式不同
Java提供多种集合类其数据结构不同，他们可定有共性的内容（存储、获取、判断等）

集合老大：Collection（集合）
	List
		ArrayList:
		Vector:
		LinkedList:
		
	Set:
		HashSet:
		TreeSet:
	
Collection（集合）:Collection 层次结构 中的根接口。Collection 表示一组对象，这些对象也称为 collection 的元素。
	集合的顶层接口，
	Collection功能：
		1:添加功能：
			boolean add(E e):添加一个元素
			boolean addAll(Collection c):添加一个集合元素
		2：删除功能：
			void clear():移除所有元素
			boolean remove(Object o)移除一个元素
			boolean removeAll(Collection<?> c)移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）。
		3：判断功能：
			boolean contains(E e):判断集合中是否包含指定的元素
			boolean containsAll(Collection c):判断集合中是否包含指定的元素只有包含所有的元素才叫true
			boolean isEmpty():判断集合是否为空
		4:获取功能：
			Iterator<E> iterator()返回在此 collection 的元素上进行迭代的迭代器。
		5：长度功能：
			int size()返回此 collection 中的元素数。
		6：交集功能：
			boolean retainAll(Collection<?> c)两个集合中都有的元素谁调此方法谁保存最后结果
				假设有两个集合A,BA对B做交集，最终的结果保存在A中，B不变。
				返回值表示A是否发生过变化
		7：把集合转换成数组：
			Object[] toArray()返回包含此 collection 中所有元素的数组。
	Collection的遍历：依次获取集合中的元素
			Object[] toArray()
			迭代器：Iterator
				 next()返回迭代的下一个元素。获取并移动，不要多次使用next（）方法
		集合的使用步骤：
			A:创建集合对象
			B:创建元素对象
			C:把元素添加到集合
			D:遍历集合
				a:通过集合对象获取迭代器对象
				b:通过迭代器对象的hasNext（）方法判断是否有元素
				C:通过迭代器对象的next（）方法获取元素并移动到下一个位置
		List 集合
			元素进来的顺序与出去的顺序一样
			有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进行精确地控制。用户可以根据元素的整数索引
			（在列表中的位置）访问元素，并搜索列表中的元素。
			与 set 不同，列表通常允许重复的元素。
		List特有的功能
			A:添加功能：
				void add(int index,E elemenmt)：在列表的指定位置插入指定的元素
			B:获取功能：
				Object get(int index)获取指定位置的元素
			C：列表迭代器功能：
				ListIterator listIterator（）：List集合特有的功能，继承了Iterator可以直接使用hasNext()和next()
					特有功能可以返回前一个元素，
					Object pervious（）返回前一个元素
			D:删除功能：
				Object remove(int index)根据索引删除元素，返回被删除的元素
			E:修改功能：
				Object set (int index,Object element):根据索引修改元素，返回被修改的元素
			迭代器遍历元素的时候，通过集合是不能修改元素的
			解决办法：
				A:迭代器修改元素 ，Iterator没有添加功能我们使用ListIterator中的方法add()
					元素跟在刚才迭代的元素后面
				B:集合遍历元素，修改元素。
					元素在最后添加的
	ArrayList：
		底层数据结构是数组，查询快，增删慢
		线程不安全，效率高
	Vector：
		底层数据结构是数组，查询快，增删慢
		线程安全，效率低
	LinkList：
		底层数据结构为链表，查询慢，增删快
		线程不安全，效率高
Vector的特有功能
	1：添加功能：
		public void addElemrnt(Object obj)
	2:获取功能:
		public Object elemenmt(int index)
		public Enumeration elements()
LinkedList的特有功能：
	A:添加功能：
		public void addFirst(Object o)在开头添加
		public void addLast(Object o)在结尾添加
	B:获取功能：
		public Object getFirst()获取第一个元素
		public Object getLast():获取最后一个元素
	C:删除功能：
		public Object removeFirst():移除第一个元素并返回
		public Object removeLast():移除最后一个元素并返回
泛型：是一种吧类型明确的工作推迟到创建后者调用方法时候才去明确的特殊的类型
		参数化类型（吧类型当做参数传递）
		格式
		<数据类型>
			只能是引用类型
	使用的地方：
		如果累接口。抽象类后面出现<>
		使用泛型泛型要求明确写的时候前后必须一致
泛型的应用：
	泛型类：
		格式 public class<K,v,L>
	泛型方法：
		public <T> void 方法名(T,t){}把泛型定义在方法上，即方法可以接受任意类型
	把泛型定义在接口上
		public interface Inter<t>{}
		实现类的情况
			A:已经知道是什么类型
			B:还不知道是什么类型
泛型的高级应用：
	通配符：
		？表示任意类型的都是可以的如果没有明确，就是Object以及任意的Java类了
		？ extends E;向下限定，？表示只有E或子类
		？ super Ｅ：向上限定，？表示Ｅ及其父类
JDK5的新特性
		自动拆装箱，泛型，增强for，静态导入，可变参数，枚举
增强for循环：
	好处：简化了数组和集合的遍历
	弊端：增强for循环的目标不能为null因先进行不为空的判断，然后使用
	用来替代迭代器的
静态导入：
	直接导入到方法级别
	格式：
		import static 包名...类名.方法名；
		eg:import static java.lang.Math.abs
	注意事项：
		A:方法必须是静态的
		B:如果有多个同名的静态得到，人员不知道使用税？这个时候使用必须加前缀。
可变参数：定义方法的时候不知道该定义多少个参数
	格式：修饰符 返回值类型 方法名(数据类型...变量名)
		注意：
			这里的变量其实就是数组。
			如果一个方法有可变参数，并且有多个参数，那么，可变参数肯定是最后一个	
public static <T>List<T> asList(T...a):把数组转换成集合
	注意事项：虽然可以吧数组转换成集合但集合的长度不能改变。
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
		
		
		
		
		
		