Collection(单列集合)
	List(有序，可重复)
		ArrayList
			底层数据结构是数组，查询快，增删慢
			线程不安全，效率高
		Vector
			底层数据结构是数组，查询快，增删慢
			线程安全，效率低
		LinkedList
			底层数据结构是链表，查询慢，增删快
			线程不安全，效率高
	Set(无序，唯一)
		HashSet
			底层数据结构是哈希表，
			依赖于两个方法：hashCode()和equals()
			执行顺序：
				首先判断hashCode()值是否相同
				是：继续执行equals(),看其返回值
					是true：说明元素重复不添加
					是false：就直接添加到集合
				否：就直接添加到集合
			最终：自动生成hashCode()和equals()方法即可
			LinkedHashSet
				底层数据结构有链表和哈希表组成
				由链表保证元素有序
				由哈希表保证元素唯一
		TreeSet
			底层数据结构是红黑树。(是一种自平衡的二叉树)
			根据比较的返回值是否为零来决定
			排序：
				自然排序(元素具备比较性)
					让元素所属的类实现Comparable接口
				比较器排序(集合具备比较性)
					让集合接受一个Comparator的实现类对象
Map(双列集合)
	HashMap
		线程不安全，效率高
		数据结构仅仅针对键有效，与值无关
		存储的是键值对形式的元素，键唯一值可重复
		底层数据结构是哈希表，
			依赖于两个方法：hashCode()和equals()
			执行顺序：
				首先判断hashCode()值是否相同
				是：继续执行equals(),看其返回值
					是true：说明元素重复不添加
					是false：就直接添加到集合
				否：就直接添加到集合
			最终：自动生成hashCode()和equals()方法即可
		LinkedHashMap
			底层数据结构有链表和哈希表组成
				由链表保证元素有序
				由哈希表保证元素唯一
	Hashtable
		线程安全，效率低
		数据结构仅仅针对键有效，与值无关
		存储的是键值对形式的元素，键唯一值可重复
		底层数据结构是哈希表，
			依赖于两个方法：hashCode()和equals()
			执行顺序：
				首先判断hashCode()值是否相同
				是：继续执行equals(),看其返回值
					是true：说明元素重复不添加
					是false：就直接添加到集合
				否：就直接添加到集合
			最终：自动生成hashCode()和equals()方法即可
		TreeMap
			底层数据结构是红黑树。(是一种自平衡的二叉树)
			根据比较的返回值是否为零来决定
			排序：
				自然排序(元素具备比较性)
					让元素所属的类实现Comparable接口
				比较器排序(集合具备比较性)
					让集合接受一个Comparator的实现类对象
如何选择使用哪种集合呢？
			看需求。
	是否是键值对像形式：
	是：Map
		键值是否需要排序：
			是：TressMap
			否：HashMap
			不知道：HashMap
	否：Collection
		元素是否唯一：
			是：Set
				元素是否需要排序：
					是：TreeSet
					否：HashSet
				不知道：HashSet
			否：List
				要安全吗：
					是：Vector(一般不用)
					否：ArrayList或LinkedList
						增删多：LinkedList
						查询多：ArrayList
					不知道：ArrayList
		不知道：ArrayList
		
		
		
		
		
		
		
		
		
		
		