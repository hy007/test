类加载：
	当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，
	连接，初始化三步来实现对这个类进行初始化。
加载 
	就是指将class文件读入内存，并为之创建一个Class对象。
	任何类被使用时系统都会建立一个Class对象。
连接
	验证 是否有正确的内部结构，并和其他类协调一致
	准备 负责为类的静态成员分配内存，并设置默认初始化值
	解析 将类的二进制数据中的符号引用替换为直接引用
	初始化 就是我们以前讲过的初始化步骤
类初始化时机：
	创建类的实例
类加载器
	负责将.class文件加载到内在中，并为之生成对应的Class对象。
	虽然我们不需要关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行。
类加载器的组成
	Bootstrap ClassLoader 根类加载器
	Extension ClassLoader 扩展类加载器
	Sysetm ClassLoader 系统类加载器
类加载器的作用
	Bootstrap ClassLoader 根类加载器
		也被称为引导类加载器，负责Java核心类的加载
		比如System,String等。在JDK中JRE的lib目录下rt.jar文件中
	Extension ClassLoader 扩展类加载器
		负责JRE的扩展目录中jar包的加载。
		在JDK中JRE的lib目录下ext目录
	Sysetm ClassLoader 系统类加载器
		负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径
反射：
	JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；
		对于任意一个对象，都能够调用它的任意一个方法和属性；
		这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
	要想解剖一个类,必须先要获取到该类的字节码文件对象。
		而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.

要想这样使用，首先你必须得到class文件对象，其实也就是得到Class类的对象。
 * Class类：
 * 		成员变量	Field
 * 		构造方法	Constructor
 * 		成员方法	Method
 * 
 * 获取class文件对象的方式：
 * A:Object类的getClass()方法
 * B:数据类型的静态属性class
 * C:Class类中的静态方法
 * 		public static Class forName(String className)
 * 
 * 一般我们到底使用谁呢?
 * 		A:自己玩	任选一种，第二种比较方便
 * 		B:开发	第三种
 * 			为什么呢?因为第三种是一个字符串，而不是一个具体的类名。这样我们就可以把这样的字符串配置到配置文件中。
	Person p = new Person();
		Class c = p.getClass();

		Person p2 = new Person();
		Class c2 = p2.getClass();

		System.out.println(p == p2);// false
		System.out.println(c == c2);// true

		// 方式2
		Class c3 = Person.class;
		// int.class;
		// String.class;
		System.out.println(c == c3);

		// 方式3
		// ClassNotFoundException
		Class c4 = Class.forName("cn.itcast_01.Person");
		System.out.println(c == c4);
		获取构造方法
		getConstructors
		getDeclaredConstructors
创建对象
		newInstance()
		con.newInstance(“zhangsan", 20);
获取所有成员
		getFields,getDeclaredFields
获取单个成员
		getField,getDeclaredField
修改成员的值
		set(Object obj,Object value)   将指定对象变量上此 Field 对象表示的字段设置为指定的新值。
获取所有方法
		getMethods
		getDeclaredMethods
获取单个方法
		getMethod
		getDeclaredMethod
暴力访问
		method.setAccessible(true);
通过配置文件运行类中的方法
我给你ArrayList<Integer>的一个对象，我想在这个集合中添加一个字符串数据，如何实现呢？
写一个方法，
public void setProperty(Object obj, String propertyName, Object value){}，
此方法可将obj对象中名为propertyName的属性的值设置为value。
动态代理：
代理：本来应该自己做的事情，却请了别人来做，被请的人就是代理对象。
举例：春季回家买票让人代买
动态代理：在程序运行过程中产生的这个对象
而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理
配置文件：
	className=cn.itcast.test.Worker
	methodName=love
加载配置文件：
		Properties properties=new Properties();//加载键值对
		FileReader fileReader=new FileReader("class.txt");
		properties.load(fileReader);
		fileReader.close();
获取数据：
		String className=properties.getProperty("className");
		String methodName=properties.getProperty("methodName");
 反射：
		Class c = Class.forName(className);

		Constructor con = c.getConstructor();
		Object obj = con.newInstance();

 调用方法：
		Method m = c.getMethod(methodName);
		m.invoke(obj);
 我给你ArrayList<Integer>的一个对象，我想在这个集合中添加一个字符串数据，如何实现呢？
 */
public class ArrayListDemo {
	public static void main(String[] args) throws NoSuchMethodException,
			SecurityException, IllegalAccessException,
			IllegalArgumentException, InvocationTargetException {
		// 创建集合对象
		ArrayList<Integer> array = new ArrayList<Integer>();

		// array.add("hello");
		// array.add(10);

		Class c = array.getClass(); // 集合ArrayList的class文件对象
		Method m = c.getMethod("add", Object.class);

		m.invoke(array, "hello"); // 调用array的add方法，传入的值是hello
		m.invoke(array, "world");
		m.invoke(array, "java");
	
public class Tool {
	public void setProperty(Object obj, String propertyName, Object value)
			throws NoSuchFieldException, SecurityException,
			IllegalArgumentException, IllegalAccessException {
		// 根据对象获取字节码文件对象
		Class c = obj.getClass();
		// 获取该对象的propertyName成员变量
		Field field = c.getDeclaredField(propertyName);
		// 取消访问检查
		field.setAccessible(true);
		// 给对象的成员变量赋值为指定的值
		field.set(obj, value);
	}
			public class ToolDemo {
			public static void main(String[] args) throws NoSuchFieldException,
					SecurityException, IllegalArgumentException, IllegalAccessException {
				Person p = new Person();
				Tool t = new Tool();
				t.setProperty(p, "name", "林青霞");
				t.setProperty(p, "age", 27);
				System.out.println(p);
				System.out.println("-----------");

				Dog d = new Dog();

				t.setProperty(d, "sex", '男');
				t.setProperty(d, "price", 12.34f);

				System.out.println(d);
			}
		}

		class Dog {
			char sex;
			float price;

			@Override
			public String toString() {
				return sex + "---" + price;
			}
		}

		class Person {
			private String name;
			public int age;

			@Override
			public String toString() {
				return name + "---" + age;
			}
Proxy类中创建动态代理对象的方法的三个参数；
ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载
Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，
如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，
这样我就能调用这组接口中的方法了
InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，
会关联到哪一个InvocationHandler对象上

每一个动态代理类都必须要实现InvocationHandler这个接口，
并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，
这个方法的调用就会被转发为由InvocationHandler这个接口的invoke 方法来进行调用。

InvocationHandler接口中invoke方法的三个参数：
proxy:代表动态代理对象
method:代表正在执行的方法
args:代表调用目标方法时传入的实参

Proxy.newProxyInstance
创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，
也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，
以$开头，proxy为中，最后一个数字表示对象的标号。
System.out.println(u.getClass().getName());
