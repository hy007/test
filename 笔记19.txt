网络编程：
	网络编程的三要素：
		A:IP地址：网络中唯一标识计算机上的位置
		B:端口
		C:协议
IP地址的组成：网络号段+主机号段
		A类：第一号段为网络号段+后三段的主机号段
			一个网络号：256*256*256 = 16777216
		B类：前二号段为网络号段+后二段的主机号段
			一个网络号：256*256 = 65536
		C类：前三号段为网络号段+后一段的主机号段
			一个网络号：256
	
	IP地址的分类：网络中计算机的唯一标识
		A类	1.0.0.1---127.255.255.254	(1)10.X.X.X是私有地址(私有地址就是在互联网上不使用，而被用在局域网络中的地址)							(2)127.X.X.X是保留地址，用做循环测试用的。
		B类	128.0.0.1---191.255.255.254	172.16.0.0---172.31.255.255是私有地址。169.254.X.X是保留地址。
		C类	192.0.0.1---223.255.255.254	192.168.X.X是私有地址
		D类	224.0.0.1---239.255.255.254 	
		E类	240.0.0.1---247.255.255.254
		
	两个DOS命令：
		ipconfig 查看本机ip地址
		ping 后面跟ip地址。测试本机与指定的ip地址间的通信是否有问题
		
	特殊的IP地址：
		127.0.0.1 回环地址(表示本机)
		x.x.x.255 广播地址
		x.x.x.0 网络地址
		
端口号：
	正在运行的程序的标识。
	有效端口：0~65535，其中0~1024系统使用或保留端口。
	
协议：
	通信的规则
	
	UDP：
		把数据打包
		数据有限制
		不建立连接
		速度快
		不可靠
	
	TCP：
		建立连接通道
		数据无限制
		速度慢
		可靠
	
	举例：
		UDP：发短信
		TCP：打电话
如果一个类没有构造方法：
 * A:成员全部是静态的(Math,Arrays,Collections)
 * B:单例设计模式(Runtime)
 * C:类中有静态方法返回该类的对象(InetAddress)
 * 		class Demo {
 * 			private Demo(){}
 * 
 * 			public static Demo getXxx() {
 * 				return new Demo();
 * 			}
 * 		}
 * 
 * 看InetAddress的成员方法：
 * public static InetAddress getByName(String host):根据主机名或者IP地址的字符串表示得到IP地址对象
 */
 Socket：网络套接字
 Socket编程，网络编程，套接字编程
Socket套接字：
	网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。
Socket原理机制：
	通信的两端都有Socket。
	网络通信其实就是Socket间的通信。
	数据在两个Socket间通过IO传输。
TCP发送数据：
	A:创建发送端的Socket对象
		这一步如果成功，就说明连接已经建立成功了
		public Socket(InetAddress address, int port)throws IOException创建一个流套接字并将其连接到指定 IP 地址的指定端口号。 
	   public Socket(String host,int port)throws UnknownHostException,
    B:获取输出流，写数据
	C:释放资源
	package cn.itcast_06;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

/*
 * TCP协议发送数据：
 * A:创建发送端的Socket对象
 * 		这一步如果成功，就说明连接已经建立成功了。
 * B:获取输出流，写数据
 * C:释放资源
 * 
 * 连接被拒绝。TCP协议一定要先看服务器。
 * java.net.ConnectException: Connection refused: connect
 */
public class ClientDemo {
	public static void main(String[] args) throws IOException {
		// 创建发送端的Socket对象
		// Socket(InetAddress address, int port)
		// Socket(String host, int port)
		// Socket s = new Socket(InetAddress.getByName("192.168.12.92"), 8888);
		Socket s = new Socket("192.168.12.92", 8888);

		// 获取输出流，写数据
		// public OutputStream getOutputStream()
		OutputStream os = s.getOutputStream();
		os.write("hello,tcp,我来了".getBytes());

		// 释放资源
		s.close();
	}
}

TCP接收端：
	package cn.itcast_06;

import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

/*
 * TCP协议接收数据：
 * A:创建接收端的Socket对象
 * B:监听客户端连接。返回一个对应的Socket对象
 * C:获取输入流，读取数据显示在控制台
 * D:释放资源
 */
public class ServerDemo {
	public static void main(String[] args) throws IOException {
		// 创建接收端的Socket对象
		// ServerSocket(int port)
		ServerSocket ss = new ServerSocket(8888);

		// 监听客户端连接。返回一个对应的Socket对象
		// public Socket accept()
		Socket s = ss.accept(); // 侦听并接受到此套接字的连接。此方法在连接传入之前一直阻塞。

		// 获取输入流，读取数据显示在控制台
		InputStream is = s.getInputStream();

		byte[] bys = new byte[1024];
		int len = is.read(bys); // 阻塞式方法
		String str = new String(bys, 0, len);

		String ip = s.getInetAddress().getHostAddress();

		System.out.println(ip + "---" + str);

		// 释放资源
		s.close();
		// ss.close(); //这个不应该关闭
	}
}


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 